package fr.afpa.pompey.cda17.parcInfoAPI.models;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.ArrayList;
import java.util.List;

/**
 * Classe entité JPA représentant un appareil dans le système.
 * <p>
 * Cette classe est utilisée pour gérer les appareils dans le système d'information.
 * Elle est mappée à la table "appareils" en base de données et contient des
 * annotations JPA pour définir les relations et les contraintes.
 * </p>
 *
 * @author Generated by Lombok
 * @version 1.0
 */
@Data // Génère automatiquement getters, setters, equals, hashCode et toString
@NoArgsConstructor // Génère un constructeur sans arguments
@Entity // Indique que cette classe est une entité persistante JPA
@Table(name = "appareils") // Spécifie le nom de la table en base de données
public class Appareil {

    /**
     * Identifiant unique auto-généré de l'appareil.
     * <p>
     * Ce champ est la clé primaire de la table "appareils". Il est auto-généré
     * grâce à la stratégie IDENTITY, ce qui signifie que la base de données
     * gère l'incrémentation automatique.
     * </p>
     */
    @Id // Marque ce champ comme clé primaire
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-incrémentation
    @Column(name = "idAppareil") // Nom de colonne en base
    private long id;

    /**
     * Libellé de l'appareil (nom technique ou descriptif).
     * <p>
     * Ce champ est obligatoire et sa longueur maximale est de 30 caractères.
     * Il représente le nom ou la description technique de l'appareil.
     * </p>
     */
    @Column(
            name = "libelle",
            nullable = false, // Ne peut pas être null en base
            length = 30 // Taille maximale en base de données
    )
    private String libelle;

    /**
     * Liste des propriétaires associés à cet appareil.
     * <p>
     * Relation bidirectionnelle ManyToMany avec l'entité Personne. Ce champ
     * est mappé par l'attribut "appareils" dans la classe Personne. La
     * récupération des données est effectuée de manière paresseuse (LAZY).
     * </p>
     */
    @ManyToMany(mappedBy = "appareils", fetch = FetchType.LAZY)
    private List<Personne> proprietaires = new ArrayList<>();
}
