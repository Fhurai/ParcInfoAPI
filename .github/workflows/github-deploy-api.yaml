name: Deploy Parc Info API
run-name: ${{ github.actor }} deploys the application
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: parcinfo
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -uroot -proot"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          architecture: x64
          cache: maven

      - name: Wait for MySQL to be ready
        timeout-minutes: 3
        run: |
          for i in `seq 1 15`; do
            if mysqladmin ping -h127.0.0.1 -uroot -proot --silent; then
              echo "MySQL is ready"
              exit 0
            fi
            echo "MySQL not ready yet. Attempt $i/15"
            sleep 5
          done
          exit 1

      - name: Initialize database schema
        run: |
          mysql -h 127.0.0.1 -u root -proot parcinfo < conception/parcinfo.sql

      - name: Permission Mvnw
        run: chmod +x ./mvnw

      - name: Build with Maven
        run: |
          ./mvnw --batch-mode --update-snapshots verify
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/parcinfo
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root

      - name: Prepare artifact
        run: mkdir staging && cp target/*.jar staging

      - uses: actions/upload-artifact@v4
        with:
          name: artefact
          path: staging

  discord:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          STATUS="${{ needs.build.result }}"
          if [ "$STATUS" = "success" ]; then
            COLOR=3066993
            MESSAGE="✅ Parc Info API Pipeline Succeeded"
            IMAGE_URL="https://c.tenor.com/Ud36Rrav628AAAAC/tenor.gif"
          else
            COLOR=15158332
            MESSAGE="❌ Parc Info API Pipeline Failed"
            IMAGE_URL="https://c.tenor.com/nsEfkzN30TIAAAAC/tenor.gif"
          fi

          PAYLOAD=$(cat <<EOF
          {
            "embeds": [{
              "title": "${MESSAGE}",
              "description": "**Workflow**: ${{ github.workflow }}\n**Repository**: ${{ github.repository }}\n**Branch**: ${{ github.ref }}\n**Commit**: [${GITHUB_SHA:0:7}](${{ github.server_url }}/${{ github.repository }}/commit/$GITHUB_SHA)",
              "color": ${COLOR},
              "image": {
                "url": "${IMAGE_URL}"
              },
              "timestamp": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            }]
          }
          EOF
          )

          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$DISCORD_WEBHOOK_URL"
        continue-on-error: true

  teams:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/develop' }}
    steps:
      - name: Send Microsoft Teams notification
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          STATUS="${{ needs.build.result }}"
          if [ "$STATUS" = "success" ]; then
            COLOR="00FF00"
            MESSAGE="✅ Parc Info API Pipeline Succeeded"
          else
            COLOR="FF0000"
            MESSAGE="❌ Parc Info API Pipeline Failed"
          fi

          PAYLOAD=$(cat <<EOF
          {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "summary": "${MESSAGE}",
            "themeColor": "${COLOR}",
            "title": "${MESSAGE}",
            "sections": [{
              "facts": [
                {"name": "Workflow", "value": "${{ github.workflow }}"},
                {"name": "Repository", "value": "${{ github.repository }}"},
                {"name": "Branch", "value": "${{ github.ref }}"},
                {"name": "Commit", "value": "[${GITHUB_SHA:0:7}](${{ github.server_url }}/${{ github.repository }}/commit/$GITHUB_SHA)"}
              ],
              "markdown": true
            }]
          }
          EOF
          )

          curl -H "Content-Type: application/json" -d "$PAYLOAD" "$TEAMS_WEBHOOK_URL"
        continue-on-error: true

  docker-build-image-api:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Connect to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: artefact.jar

      - name: List files in the repository
        run: ls ${{ github.workspace }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{secrets.DOCKERHUB_USER}}/parcinfo_api:latest

      - run: echo "This job status is ${{ job.status }}"